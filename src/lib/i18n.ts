import i18n, { type Resource } from "i18next";
import { initReactI18next } from "react-i18next";

const STORAGE_KEY = "equilibre-couple:lang";
const fallbackLng = "fr" as const;

const getInitialLanguage = () => {
  if (typeof window === "undefined") {
    return fallbackLng;
  }
  const stored = window.localStorage.getItem(STORAGE_KEY);
  if (stored) {
    return stored;
  }
  const navigatorLang = window.navigator.language?.split("-")[0];
  if (navigatorLang === "fr" || navigatorLang === "en") {
    return navigatorLang;
  }
  return fallbackLng;
};

const resources: Resource = {
  fr: {
    translation: {
      languages: {
        fr: "Fran√ßais",
        en: "English",
      },
      header: {
        title: "üíû √âquilibre couple ‚Äî calculateur",
        description:
          "Ajustez vos contributions communes en quelques secondes et visualisez un partage √©quilibr√©, clair et apaisant.",
        github: "GitHub",
      },
      actions: {
        copyLink: "Copier le lien",
        copyLinkSuccess: "Lien copi√© dans le presse-papiers.",
        print: "Imprimer / PDF",
        reset: "R√©initialiser",
        confirmLoad: "Charger cet enregistrement va remplacer les valeurs actuelles. Continuer ?",
        confirmClearFirst: "Supprimer tout l'historique local ?",
        confirmClearSecond: "Cette action est d√©finitive. Confirmer la suppression ?",
      },
      accessibility: {
        modeProportional: "Mode proportionnel activ√©",
        modeEqualLeftover: "Mode reste √† vivre √©gal activ√©",
        historyCleared: "Historique effac√©",
        historyLoaded: "Enregistrement du {{date}} charg√©",
        toggleDarkMode: "Basculer mode sombre",
        info: "Informations compl√©mentaires",
        languageSwitcher: "Changer de langue",
      },
      parameters: {
        title: "Param√®tres",
        description:
          "Personnalisez les revenus, les tickets restaurant et le budget commun pour obtenir une proposition sur-mesure.",
        partnerNameLabel: "Nom partenaire {{label}}",
        partnerPlaceholder: "Partenaire {{label}}",
        partnerTooltip:
          "Personnalise le nom utilis√© pour le partenaire {{label}} dans les calculs et graphiques",
        modeLabel: "Mode de r√©partition",
        modeTooltip:
          "Proportionnel : chacun contribue selon ses moyens. Reste √† vivre √©gal : chacun garde le m√™me reste cash apr√®s contribution.",
        modes: {
          proportional: {
            title: "Proportionnel",
            description: "Chacun contribue selon ses moyens, tickets resto inclus.",
            announcement: "Mode proportionnel",
          },
          equal_leftover: {
            title: "Reste √† vivre √©gal",
            description: "Alignement du cash restant apr√®s contribution pour chaque partenaire.",
            announcement: "Mode reste √† vivre √©gal",
          },
        },
        salaryLabel: "Salaire {{name}}",
        ticketsLabel: "Tickets resto {{name}}",
        sharedBudgetLabel: "Budget commun hors TR",
        trPctLabel: "% TR effectivement d√©pens√©s",
        eligibleLabel: "D√©penses √©ligibles TR (E)",
        codeSuffix: " ({{code}})",
        trPctTooltip: "Pourcentage des TR r√©ellement consomm√©s",
        eligibleTooltip:
          "Montant mensuel des d√©penses √©ligibles (courses/resto) qui peuvent √™tre pay√©es en TR",
        sharedBudgetTooltip: "Part du budget commun non √©ligible TR (cash)",
        salaryTooltip: "Salaire net mensuel de {{name}}",
        ticketsTooltip: "Montant mensuel brut de tickets restaurant cr√©dit√©s pour {{name}}",
        advancedToggle: {
          title: "Mode avanc√©",
          description: "Ajouter les d√©penses √©ligibles et ajuster finement la contribution.",
          helper: "Permet de saisir E = d√©penses √©ligibles TR (au‚Äëdel√† des TR)",
        },
        bias: {
          label: "Ajustement du prorata (favoriser {{partnerA}} ou {{partnerB}})",
          summaryNeutral: "Neutre",
          summaryFavor: "Favorise {{name}} ({{points}} pts)",
          summaryDetail: "{{points}} points pour {{name}}",
          helper: "Valeur positive: favorise {{partnerB}} ({{partnerA}} paie davantage). Valeur n√©gative: favorise {{partnerA}} ({{partnerA}} paie moins).",
          sliderLabel: "Ajustement du prorata ({{partnerA}} ‚Üî {{partnerB}})",
          favorA: "Favoriser {{name}}",
          favorB: "Favoriser {{name}}",
          neutral: "Neutre",
          disabled: "Biais non applicable en mode ‚ÄúReste √† vivre √©gal‚Äù.",
        },
        suffix: {
          euroMonth: "‚Ç¨ / mois",
          percent: "%",
        },
      },
      summary: {
        title: "R√©sum√©",
        description:
          "Aper√ßu instantan√© de la r√©partition et du niveau de contribution de chaque partenaire.",
        labels: {
          share: "Part {{name}}",
          deposit: "D√©p√¥t {{name}}",
          leftover: "Reste {{name}}",
          totalCash: "Cash total √† d√©poser",
          usedTr: "TR utilis√©s (V)",
          totalPot: "Pot total (M)",
          warnings: "Avertissements",
        },
        chart: {
          title: "R√©partition des contributions",
          centerPercent: "Total (%)",
          centerAmount: "Total (‚Ç¨)",
          deposit: "D√©p√¥t {{name}}",
          tr: "TR {{name}}",
        },
        saveBlock: {
          title: "Sauvegarder cette configuration",
          description: "Les enregistrements sont stock√©s localement sur cet appareil.",
          addNote: "Ajouter une note",
          save: "Enregistrer dans l'historique",
        },
      },
      calculationInfo: {
        aria: "Comprendre les mod√®les de calcul",
        toggle: "Comprendre le calcul",
        sectionTitle: "Comprendre les deux mod√®les",
        objectiveTitle: "üéØ Objectif",
        objectiveText:
          "R√©partir les d√©penses communes en respectant les moyens de chacun pour que l‚Äôeffort ressenti reste comparable, sans viser un partage strictement 50/50.",
        modelsTitle: "‚öñÔ∏è Deux mod√®les",
        proportionalTitle: "‚öñÔ∏è Mod√®le 1 ‚Äî Proportionnel aux revenus (avec TR)",
        proportionalList: [
          "Calcule les moyens r√©els : salaires + tickets resto consomm√©s.",
          "Attribue √† chacun une part au prorata de ces moyens.",
          "D√©duit les TR d√©j√† utilis√©s avant de demander du cash.",
          "Ajuste le budget commun en incluant la part √©ligible TR.",
        ],
        equalTitle: "‚öñÔ∏è Mod√®le 2 ‚Äî Reste √† vivre √©gal",
        equalList: [
          "Fixe un objectif : m√™me reste cash pour A et B apr√®s contribution.",
          "R√©partit le d√©p√¥t n√©cessaire pour aligner ces restes.",
          "Int√®gre les TR d√©j√† utilis√©s pour r√©duire l‚Äôeffort demand√©.",
          "Compense si l‚Äôun devrait contribuer n√©gativement (borne √† 0).",
        ],
        trTitle: "üçΩÔ∏è Tickets resto",
        trText:
          "Les TR sont compt√©s comme contribution en nature sur les d√©penses √©ligibles. Seule la part r√©ellement consomm√©e est prise en compte.",
        biasTitle: "üéöÔ∏è Biais",
        biasText:
          "L‚Äôajustement du prorata permet de d√©placer l√©g√®rement la part de A ou B pour r√©pondre √† un inconfort ponctuel ou √©quilibrer des charges personnelles.",
        limitsTitle: "üß© Limites",
        limitsList: [
          "Adapter le % de TR si tous ne sont pas d√©pens√©s pour les d√©penses communes.",
          "Surveiller la part du budget non √©ligible TR pour √©valuer l‚Äôeffort ressenti.",
          "Prendre en compte les charges personnelles marqu√©es si elles diff√®rent beaucoup.",
        ],
        detailsLink: "Voir les formules d√©taill√©es",
      },
      details: {
        title: "D√©tails du calcul",
        show: "Afficher les d√©tails",
        hide: "Masquer les d√©tails",
        warnings: "Avertissements",
        note: "Note: les tickets resto sont compt√©s comme une <strong>contribution en nature</strong>.",
      },
      glossary: {
        aria: "Glossaire contextuel",
        title: "Glossaire",
        terms: [
          {
            term: "m",
            description: "Budget commun √† alimenter en cash (d√©penses non √©ligibles aux tickets resto).",
          },
          {
            term: "E",
            description: "Montant mensuel des d√©penses √©ligibles aux tickets resto qui d√©passent les TR disponibles.",
          },
          {
            term: "V",
            description: "Total des tickets restaurant r√©ellement utilis√©s dans le calcul (apr√®s application du % TR effectifs).",
          },
          {
            term: "TR effectifs",
            description:
              "Montant de tickets resto pris en compte apr√®s avoir appliqu√© le pourcentage de TR effectivement d√©pens√©s.",
          },
          {
            term: "Pot total (M)",
            description:
              "Budget mutualis√© utilis√© pour r√©partir les d√©penses: cash m + d√©penses √©ligibles (E) ou tickets utilis√©s (V).",
          },
          {
            term: "Biais",
            description:
              "Ajustement manuel du prorata: valeur positive favorise B (A paie plus), valeur n√©gative favorise A (A paie moins).",
          },
        ],
      },
      history: {
        title: "Historique",
        description: "Jusqu'√† 60 enregistrements sont conserv√©s sur cet appareil.",
        clear: "Tout effacer",
        noteLabel: "Note",
        notePlaceholder: "Oct. 2025 ‚Äì nouveau loyer",
        searchLabel: "Recherche",
        searchPlaceholder: "Filtrer par note ou mois",
        periodLabel: "P√©riode",
        periodOptions: {
          all: "Tout",
          three: "3 derniers mois",
          six: "6 derniers mois",
          twelve: "12 derniers mois",
        },
        save: "Enregistrer dans l'historique",
        maxWarning:
          "Capacit√© maximale atteinte. Le prochain enregistrement remplacera le plus ancien.",
        empty: "Aucun enregistrement ne correspond √† votre recherche.",
        listLabel: "Historique des calculs enregistr√©s",
        listActions: "Actions pour l'enregistrement du {{label}}",
        load: "Charger",
        details: "D√©tails",
        delete: "Supprimer",
        loadAria: "Charger l'enregistrement du {{label}}",
        detailsAria: "Afficher les d√©tails de l'enregistrement du {{label}}",
        deleteAria: "Supprimer l'enregistrement du {{label}}",
        boolYes: "Oui",
        boolNo: "Non",
        defaultValue: "(par d√©faut)",
        noNote: "(sans note)",
        depositsSummary:
          "D√©p√¥ts ‚Äî {{partnerA}}: {{depositA}} / {{partnerB}}: {{depositB}}",
        cashSummary: "Cash: {{cash}} ¬∑ TR utilis√©s: {{usedTr}}",
        inputs: {
          a1: "Salaire A",
          a2: "TR bruts A",
          b: "Salaire B",
          b2: "TR bruts B",
          m: "Budget hors TR",
          trPct: "% TR d√©pens√©s",
          E: "D√©penses √©ligibles",
          biasPts: "Biais (pts)",
          advanced: "Mode avanc√©",
          partnerA: "Nom A",
          partnerB: "Nom B",
        },
      },
      calc: {
        warnings: {
          zeroWeighted: "Somme des revenus pond√©r√©s nulle ‚Äî parts fix√©es √† 50/50 par s√©curit√©.",
          depositBoundedA: "Le d√©p√¥t de {{name}} est born√© √† 0 (sa part est couverte par les tickets resto).",
          depositBoundedB: "Le d√©p√¥t de {{name}} est born√© √† 0 (sa part est couverte par les tickets resto).",
          equalBoundedA: "D√©p√¥t A born√© √† 0 (reste √©galis√©).",
          equalBoundedB: "D√©p√¥t B born√© √† 0 (reste √©galis√©).",
          trNotFullyUsed: "TR non utilis√©s int√©gralement: {{amount}} ‚Ç¨ non consomm√©s (E < TR).",
        },
        steps: {
          effectiveTr:
            "TR effectifs ‚Äî {{partnerAName}}: {{valueA}} ‚Ç¨, {{partnerBName}}: {{valueB}} ‚Ç¨ (total {{total}} ‚Ç¨)",
          usedTr:
            "TR utilis√©s ‚Äî {{partnerAName}}: {{valueA}} ‚Ç¨, {{partnerBName}}: {{valueB}} ‚Ç¨ (total {{total}} ‚Ç¨)",
          usedTrCapped:
            "TR utilis√©s (apr√®s plafond E) ‚Äî {{partnerAName}}: {{valueA}} ‚Ç¨, {{partnerBName}}: {{valueB}} ‚Ç¨ (total {{total}} ‚Ç¨)",
          totalPot:
            "Pot total √©quivalent = m + V = {{m}} + {{v}} = {{total}} ‚Ç¨",
          totalPotAdvanced:
            "Pot total M = m + E = {{m}} + {{eligible}} = {{total}} ‚Ç¨",
          cashNeeded:
            "Cash √† d√©poser = m = {{cash}} ‚Ç¨",
          cashNeededAdvanced:
            "Cash √† d√©poser = m + max(0, E - V) = {{m}} + {{extra}} = {{cash}} ‚Ç¨",
          sharesRaw:
            "Parts (avant biais): {{partnerAName}}={{shareA}}% / {{partnerBName}}={{shareB}}%",
          bias:
            "Biais {{bias}} pts ({{direction}}) => {{partnerAName}}={{shareA}}% / {{partnerBName}}={{shareB}}%",
          biasDirection: {
            neutral: "neutre",
            favorA: "favorise {{name}}",
            favorB: "favorise {{name}}",
          },
          contributionEquivalent:
            "Contribution √©quivalente: {{partnerAName}}={{valueA}} ‚Ç¨, {{partnerBName}}={{valueB}} ‚Ç¨",
          cashDeposits:
            "D√©p√¥ts cash: {{partnerAName}}={{valueA}} ‚Ç¨, {{partnerBName}}={{valueB}} ‚Ç¨ (somme cash={{total}} ‚Ç¨)",
          equalModeIntro: "Mode reste √† vivre √©gal : chacun conserve le m√™me reste cash.",
          equalEquation:
            "√âgalit√© du reste cash: {{sa}} - d√©p√¥t {{partnerAName}} = {{sb}} - d√©p√¥t {{partnerBName}}",
          equalDepositA:
            "D√©p√¥t {{partnerAName}} = (cashNeeded + ({{sa}} - {{sb}})) / 2 = {{depositA}} ‚Ç¨",
          equalDepositB:
            "D√©p√¥t {{partnerBName}} = cashNeeded - d√©p√¥t {{partnerAName}} = {{cashNeeded}} - {{depositA}} = {{depositB}} ‚Ç¨",
          equalBoundedA: "D√©p√¥t {{partnerAName}} born√© √† 0 pour √©viter un d√©p√¥t n√©gatif.",
          equalBoundedB: "D√©p√¥t {{partnerBName}} born√© √† 0 pour √©viter un d√©p√¥t n√©gatif.",
          contributionEqual:
            "Contribution √©quivalente (cash + TR): {{partnerAName}}={{valueA}} ‚Ç¨, {{partnerBName}}={{valueB}} ‚Ç¨",
          leftovers:
            "Restes cash √©galis√©s: {{partnerAName}}={{valueA}} ‚Ç¨, {{partnerBName}}={{valueB}} ‚Ç¨",
        },
      },
    },
  },
  en: {
    translation: {
      languages: {
        fr: "French",
        en: "English",
      },
      header: {
        title: "üíû Couple balance ‚Äî calculator",
        description:
          "Adjust your shared contributions in seconds and visualise a balanced, clear and reassuring split.",
        github: "GitHub",
      },
      actions: {
        copyLink: "Copy link",
        copyLinkSuccess: "Link copied to the clipboard.",
        print: "Print / PDF",
        reset: "Reset",
        confirmLoad: "Loading this entry will replace the current values. Continue?",
        confirmClearFirst: "Delete the entire local history?",
        confirmClearSecond: "This action cannot be undone. Confirm deletion?",
      },
      accessibility: {
        modeProportional: "Proportional mode enabled",
        modeEqualLeftover: "Equal leftover mode enabled",
        historyCleared: "History cleared",
        historyLoaded: "Entry from {{date}} loaded",
        toggleDarkMode: "Toggle dark mode",
        info: "More information",
        languageSwitcher: "Change language",
      },
      parameters: {
        title: "Parameters",
        description:
          "Adjust incomes, meal vouchers and the shared budget to obtain a tailored recommendation.",
        partnerNameLabel: "Partner {{label}} name",
        partnerPlaceholder: "Partner {{label}}",
        partnerTooltip: "Customises the name used for partner {{label}} in calculations and charts",
        modeLabel: "Split mode",
        modeTooltip:
          "Proportional: each person contributes based on their means. Equal leftover: both keep the same remaining cash after contributing.",
        modes: {
          proportional: {
            title: "Proportional",
            description: "Each person contributes according to their means, including meal vouchers.",
            announcement: "Proportional mode",
          },
          equal_leftover: {
            title: "Equal leftover",
            description: "Aligns remaining cash after contributing for each partner.",
            announcement: "Equal leftover mode",
          },
        },
        salaryLabel: "Income {{name}}",
        ticketsLabel: "Meal vouchers {{name}}",
        sharedBudgetLabel: "Shared budget excluding vouchers",
        trPctLabel: "% vouchers actually used",
        eligibleLabel: "Voucher-eligible expenses (E)",
        codeSuffix: " ({{code}})",
        trPctTooltip: "Percentage of vouchers actually spent",
        eligibleTooltip: "Monthly amount of eligible expenses (groceries/restaurants) that can be paid with vouchers",
        sharedBudgetTooltip: "Part of the shared budget that cannot be paid with vouchers (cash)",
        salaryTooltip: "Net monthly income of {{name}}",
        ticketsTooltip: "Gross monthly amount of vouchers credited for {{name}}",
        advancedToggle: {
          title: "Advanced mode",
          description: "Add eligible expenses and fine-tune the contribution.",
          helper: "Lets you enter E = voucher-eligible expenses (beyond vouchers)",
        },
        bias: {
          label: "Share adjustment (favour {{partnerA}} or {{partnerB}})",
          summaryNeutral: "Neutral",
          summaryFavor: "Favours {{name}} ({{points}} pts)",
          summaryDetail: "{{points}} points for {{name}}",
          helper:
            "Positive values favour {{partnerB}} ({{partnerA}} pays more). Negative values favour {{partnerA}} ({{partnerA}} pays less).",
          sliderLabel: "Share adjustment ({{partnerA}} ‚Üî {{partnerB}})",
          favorA: "Favour {{name}}",
          favorB: "Favour {{name}}",
          neutral: "Neutral",
          disabled: "Bias not available in \"Equal leftover\" mode.",
        },
        suffix: {
          euroMonth: "‚Ç¨/month",
          percent: "%",
        },
      },
      summary: {
        title: "Summary",
        description:
          "Instant overview of the split and each partner's contribution level.",
        labels: {
          share: "Share {{name}}",
          deposit: "Deposit {{name}}",
          leftover: "Leftover {{name}}",
          totalCash: "Total cash to deposit",
          usedTr: "Vouchers used (V)",
          totalPot: "Total pot (M)",
          warnings: "Warnings",
        },
        chart: {
          title: "Contribution breakdown",
          centerPercent: "Total (%)",
          centerAmount: "Total (‚Ç¨)",
          deposit: "Deposit {{name}}",
          tr: "Voucher {{name}}",
        },
        saveBlock: {
          title: "Save this configuration",
          description: "Entries are stored locally on this device.",
          addNote: "Add a note",
          save: "Save to history",
        },
      },
      calculationInfo: {
        aria: "Understand the calculation models",
        toggle: "Understand the calculation",
        sectionTitle: "Understand the two models",
        objectiveTitle: "üéØ Objective",
        objectiveText:
          "Split shared expenses according to each person's means so that the perceived effort stays comparable, without forcing a strict 50/50 split.",
        modelsTitle: "‚öñÔ∏è Two models",
        proportionalTitle: "‚öñÔ∏è Model 1 ‚Äî Proportional to income (with vouchers)",
        proportionalList: [
          "Computes real means: salaries + vouchers actually spent.",
          "Assigns each a share proportional to those means.",
          "Subtracts vouchers already used before asking for cash.",
          "Adjusts the shared budget by including the eligible share of vouchers.",
        ],
        equalTitle: "‚öñÔ∏è Model 2 ‚Äî Equal leftover",
        equalList: [
          "Targets the same remaining cash for A and B after contributing.",
          "Splits the required deposit to align those leftovers.",
          "Includes vouchers already used to reduce the cash effort.",
          "Compensates when one side would contribute negatively (clamped to 0).",
        ],
        trTitle: "üçΩÔ∏è Meal vouchers",
        trText:
          "Vouchers count as in-kind contributions on eligible expenses. Only the amount actually spent is included.",
        biasTitle: "üéöÔ∏è Bias",
        biasText:
          "The bias slider lets you slightly shift shares to address discomfort or balance personal expenses.",
        limitsTitle: "üß© Limits",
        limitsList: [
          "Adapt the % of vouchers if not all of them are spent on shared expenses.",
          "Watch the non-eligible budget share to assess perceived effort.",
          "Account for personal expenses if they differ greatly.",
        ],
        detailsLink: "View detailed formulas",
      },
      details: {
        title: "Calculation details",
        show: "Show details",
        hide: "Hide details",
        warnings: "Warnings",
        note: "Note: meal vouchers count as an <strong>in-kind contribution</strong>.",
      },
      glossary: {
        aria: "Contextual glossary",
        title: "Glossary",
        terms: [
          {
            term: "m",
            description: "Cash to feed the shared budget (expenses not eligible to vouchers).",
          },
          {
            term: "E",
            description: "Monthly eligible expenses that exceed available vouchers.",
          },
          {
            term: "V",
            description: "Total vouchers actually used in the calculation (after applying the effective %).",
          },
          {
            term: "Effective vouchers",
            description:
              "Voucher amount counted after applying the percentage actually spent.",
          },
          {
            term: "Total pot (M)",
            description:
              "Shared pot used to split expenses: cash m + eligible expenses (E) or vouchers used (V).",
          },
          {
            term: "Bias",
            description:
              "Manual adjustment of the ratio: positive values favour B (A pays more), negative values favour A (A pays less).",
          },
        ],
      },
      history: {
        title: "History",
        description: "Up to 60 entries are stored on this device.",
        clear: "Clear all",
        noteLabel: "Note",
        notePlaceholder: "Oct. 2025 ‚Äì new rent",
        searchLabel: "Search",
        searchPlaceholder: "Filter by note or month",
        periodLabel: "Period",
        periodOptions: {
          all: "All",
          three: "Last 3 months",
          six: "Last 6 months",
          twelve: "Last 12 months",
        },
        save: "Save to history",
        maxWarning:
          "Maximum capacity reached. The next entry will replace the oldest one.",
        empty: "No entry matches your search.",
        listLabel: "History of saved calculations",
        listActions: "Actions for the entry from {{label}}",
        load: "Load",
        details: "Details",
        delete: "Delete",
        loadAria: "Load the entry from {{label}}",
        detailsAria: "Show the entry details from {{label}}",
        deleteAria: "Delete the entry from {{label}}",
        boolYes: "Yes",
        boolNo: "No",
        defaultValue: "(default)",
        noNote: "(no note)",
        depositsSummary:
          "Deposits ‚Äî {{partnerA}}: {{depositA}} / {{partnerB}}: {{depositB}}",
        cashSummary: "Cash: {{cash}} ¬∑ Vouchers used: {{usedTr}}",
        inputs: {
          a1: "Income A",
          a2: "Vouchers gross A",
          b: "Income B",
          b2: "Vouchers gross B",
          m: "Budget without vouchers",
          trPct: "% vouchers spent",
          E: "Eligible expenses",
          biasPts: "Bias (pts)",
          advanced: "Advanced mode",
          partnerA: "Name A",
          partnerB: "Name B",
        },
      },
      calc: {
        warnings: {
          zeroWeighted:
            "Weighted income sum is zero ‚Äî shares forced to 50/50 for safety.",
          depositBoundedA:
            "Deposit for {{name}} clamped to 0 (their share is covered by vouchers).",
          depositBoundedB:
            "Deposit for {{name}} clamped to 0 (their share is covered by vouchers).",
          equalBoundedA: "Deposit A clamped to 0 (leftover equalised).",
          equalBoundedB: "Deposit B clamped to 0 (leftover equalised).",
          trNotFullyUsed: "Vouchers not fully used: {{amount}} ‚Ç¨ unused (E < vouchers).",
        },
        steps: {
          effectiveTr:
            "Effective vouchers ‚Äî {{partnerAName}}: {{valueA}} ‚Ç¨, {{partnerBName}}: {{valueB}} ‚Ç¨ (total {{total}} ‚Ç¨)",
          usedTr:
            "Vouchers used ‚Äî {{partnerAName}}: {{valueA}} ‚Ç¨, {{partnerBName}}: {{valueB}} ‚Ç¨ (total {{total}} ‚Ç¨)",
          usedTrCapped:
            "Vouchers used (after E cap) ‚Äî {{partnerAName}}: {{valueA}} ‚Ç¨, {{partnerBName}}: {{valueB}} ‚Ç¨ (total {{total}} ‚Ç¨)",
          totalPot:
            "Equivalent total pot = m + V = {{m}} + {{v}} = {{total}} ‚Ç¨",
          totalPotAdvanced:
            "Total pot M = m + E = {{m}} + {{eligible}} = {{total}} ‚Ç¨",
          cashNeeded: "Cash to deposit = m = {{cash}} ‚Ç¨",
          cashNeededAdvanced:
            "Cash to deposit = m + max(0, E - V) = {{m}} + {{extra}} = {{cash}} ‚Ç¨",
          sharesRaw:
            "Shares (before bias): {{partnerAName}}={{shareA}}% / {{partnerBName}}={{shareB}}%",
          bias:
            "Bias {{bias}} pts ({{direction}}) => {{partnerAName}}={{shareA}}% / {{partnerBName}}={{shareB}}%",
          biasDirection: {
            neutral: "neutral",
            favorA: "favours {{name}}",
            favorB: "favours {{name}}",
          },
          contributionEquivalent:
            "Equivalent contribution: {{partnerAName}}={{valueA}} ‚Ç¨, {{partnerBName}}={{valueB}} ‚Ç¨",
          cashDeposits:
            "Cash deposits: {{partnerAName}}={{valueA}} ‚Ç¨, {{partnerBName}}={{valueB}} ‚Ç¨ (cash total={{total}} ‚Ç¨)",
          equalModeIntro: "Equal leftover mode: both keep the same remaining cash.",
          equalEquation:
            "Equal remaining cash: {{sa}} - deposit {{partnerAName}} = {{sb}} - deposit {{partnerBName}}",
          equalDepositA:
            "Deposit {{partnerAName}} = (cashNeeded + ({{sa}} - {{sb}})) / 2 = {{depositA}} ‚Ç¨",
          equalDepositB:
            "Deposit {{partnerBName}} = cashNeeded - deposit {{partnerAName}} = {{cashNeeded}} - {{depositA}} = {{depositB}} ‚Ç¨",
          equalBoundedA: "Deposit {{partnerAName}} clamped to 0 to avoid a negative deposit.",
          equalBoundedB: "Deposit {{partnerBName}} clamped to 0 to avoid a negative deposit.",
          contributionEqual:
            "Equivalent contribution (cash + vouchers): {{partnerAName}}={{valueA}} ‚Ç¨, {{partnerBName}}={{valueB}} ‚Ç¨",
          leftovers:
            "Equalised cash leftovers: {{partnerAName}}={{valueA}} ‚Ç¨, {{partnerBName}}={{valueB}} ‚Ç¨",
        },
      },
    },
  },
};

if (!i18n.isInitialized) {
  void i18n.use(initReactI18next).init({
    resources,
    fallbackLng,
    lng: getInitialLanguage(),
    interpolation: {
      escapeValue: false,
    },
    returnObjects: true,
  });
}

if (typeof window !== "undefined") {
  i18n.on("languageChanged", (lng) => {
    window.localStorage.setItem(STORAGE_KEY, lng);
  });
}

export { resources };
export default i18n;
